security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        entity_users:
            entity:
                class: 'App\Entity\User'
        ldap_users:
            ldap:
                service: Symfony\Component\Ldap\Ldap
                base_dn: '%env(resolve:LDAP_AUTH_BASE_DN)%'
                search_dn: '%env(resolve:LDAP_BIND_DN)%'
                search_password: '%env(resolve:LDAP_BIND_SECRET)%'
                default_roles: ROLE_ADMIN
                uid_key: '%env(resolve:LDAP_AUTH_USERNAME_ATTRIBUTE)%'
                extra_fields: ['%env(resolve:LDAP_AUTH_EMAIL_ATTRIBUTE)%']
        all_users:
            chain:
                providers: ['entity_users', 'ldap_users']
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        monitoring:
            pattern: ^/api/(metrics)/
            stateless: true
            anonymous: lazy
            provider: 'all_users'
            http_basic:
                realm: Secured Area
            http_basic_ldap:
                service: Symfony\Component\Ldap\Ldap
                dn_string: '%env(resolve:LDAP_AUTH_BASE_DN)%'
                query_string: '(&(%env(resolve:LDAP_AUTH_USERNAME_ATTRIBUTE)%={username})%env(resolve:LDAP_AUTH_USER_QUERY)%)'
                search_dn: '%env(resolve:LDAP_BIND_DN)%'
                search_password: '%env(resolve:LDAP_BIND_SECRET)%'
        main:
            stateless: true
            anonymous: lazy
            provider: 'entity_users'
            guard:
                authenticators:
                    - App\Security\LdapAuthenticator
                    - App\Security\LoginFormAuthenticator
                    - App\Security\ApiTokenAuthenticator
                entry_point: App\Security\ApiTokenAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/currency, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: /api/password/reset, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/metrics, roles: ROLE_MONITORING, methods: [GET] }
        - { path: ^/api/admin, roles: ROLE_ADMIN }
        - { path: ^/api/user/verify, roles: ROLE_USER }
        - { path: ^/api/user, roles: ROLE_USER, methods: [DELETE, PUT, GET] }
        - { path: ^/api/user, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [POST] }
        - { path: /api/logout, roles: ROLE_USER }
        - { path: ^/api, roles: ROLE_VERIFIED_USER }

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_MONITORING]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    encoders:
        App\Entity\User:
            algorithm: bcrypt
