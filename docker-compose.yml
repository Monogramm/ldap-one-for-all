version: "2.4"

networks:
  app_dev_external_network:
  app_dev_internal_network:
  #app_dev_elk_network:

#volumes:
#  app_dev_elasticsearch:

services:
  app_dev_symfony:
    build:
      context: ./
      dockerfile: Dockerfile.develop
      args:
        # Set user and group ID to fix permissions issues
        - WWW_USER_ID=1000
        - WWW_GROUP_ID=1000
    image: ${IMAGE_NAME}-dev
    command: symfony server:start --allow-http --no-tls --port=8000
    container_name: app_dev_symfony
    #restart: always
    healthcheck:
      test: CMD curl -v --silent http://localhost:8000/health 2>&1 | grep UP
      interval: 1m30s
      timeout: 10s
      retries: 3
      #start_period: 40s
    ports:
      - "8000:8000"
    depends_on:
      - app_dev_db
      - app_dev_rabbitmq
      - app_dev_mailer
    networks:
      default:
      app_dev_external_network:
      app_dev_internal_network:
        aliases:
          - symfony
    volumes:
      # For DEV, mount local sources
      - ./app:/var/www/html
      # Mount local PHP conf files
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ./docker/php/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - SF_PROD=false
      - APP_ENV=dev
      - APP_DEBUG=true
      - SF_CLEAR_CACHE=true
      - SF_INIT_DB=true
      # Admin configuration
      - SF_ADMIN_LOGIN=${APP_ADMIN_LOGIN}
      - SF_ADMIN_EMAIL=${APP_ADMIN_EMAIL}
      - SF_ADMIN_PASSWD=${APP_ADMIN_PASSWD}
      # Database configuration
      #- SF_DB_TYPE=postgresql
      #- SF_DB_VERSION=${APP_DB_VERSION}
      #- SF_DB_OPTIONS=&charset=utf8
      #- SF_DB_HOST=database
      #- SF_DB_PORT=5432
      #- SF_DB_NAME=${APP_DB_NAME}
      #- SF_DB_USER=${APP_DB_USER}
      #- SF_DB_PASSWORD=${APP_DB_PASSWD}
      # Normally generated by entrypoint at runtime
      - DATABASE_URL=postgresql://${APP_DB_USER}:${APP_DB_PASSWD}@database:5432/${APP_DB_NAME}?serverVersion=${APP_DB_VERSION}&charset=utf8
      # Mailer configuration
      #- MAILER_TRANSPORT=smtp
      #- MAILER_HOST=mailer
      #- MAILER_PORT=1025
      #- MAILER_USER=
      #- MAILER_PASSWORD=
      # Normally generated by entrypoint at runtime
      - MAILER_FROM=${APP_MAILER_FROM}
      - MAILER_DSN=smtp://mailer:1025
      # RabbitMQ configuration
      #- MESSENGER_TRANSPORT=amqp
      #- SF_RABBITMQ_HOST=rabbitmq
      #- SF_RABBITMQ_PORT=5672
      #- SF_RABBITMQ_USER=${APP_RABBIT_USER}
      #- SF_RABBITMQ_PASSWORD=${APP_RABBIT_PASSWD}
      # Normally generated by entrypoint at runtime
      - MESSENGER_TRANSPORT_DSN=amqp://${APP_RABBIT_USER}:${APP_RABBIT_PASSWD}@rabbitmq:5672/%2f/messages
      # JWT passphrase. If not defined, container will generate passphrase and keys on startup
      - JWT_PASSPHRASE=${APP_JWT_PASSPHRASE}
      # Custom encryptor configuration
      - ENCRYPTOR_KEY=${APP_ENCRYPTOR_KEY}
      # LDAP Authentication configuration
      - LDAP_AUTH_ENABLED=${APP_LDAP_AUTH_ENABLED}
      - LDAP_AUTH_HOST=app_dev_ldap
      - LDAP_AUTH_PORT=10389
      - LDAP_AUTH_ENCRYPTION=none
      - LDAP_AUTH_IS_AD=0
      - LDAP_AUTH_AD_DOMAIN=${APP_LDAP_AUTH_AD_DOMAIN}
      - LDAP_AUTH_BASE_DN=${APP_LDAP_AUTH_BASE_DN}
      - LDAP_AUTH_USER_QUERY=(objectClass=inetOrgPerson)
      - LDAP_AUTH_USERNAME_ATTRIBUTE=uid
      - LDAP_AUTH_EMAIL_ATTRIBUTE=mail
      - LDAP_BIND_DN=${APP_LDAP_BIND_DN}
      - LDAP_BIND_SECRET=${APP_LDAP_BIND_SECRET}
      # LDAP Group configuration
      - LDAP_GROUP_BASE_DN=${APP_LDAP_GROUP_BASE_DN}
      - LDAP_GROUP_QUERY=(objectClass=Group)
      - LDAP_GROUP_ATTRIBUTE=member
      # Paypal configuration
      - PAYPAL_CLIENT_ID=${APP_PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${APP_PAYPAL_CLIENT_SECRET}
      - PAYPAL_CLIENT_ENV=${APP_PAYPAL_CLIENT_ENV}
      # Application Public URLs
      - SF_SERVER_PUBLIC_URL=http://localhost:8000
      - SF_WEBSITE_PUBLIC_URL=http://localhost:8000
      - SF_FACEBOOK_URL=#
      - SF_TWITTER_URL=#
      - SF_LINKEDIN_URL=#
      - SF_YOUTUBE_URL=#
      # Google Analytics
      - SF_GOOGLE_ANALYTICS_ID=#
      # Matomo
      - SF_MATOMO_URL=#
      - SF_MATOMO_SITE_ID=0
      - SF_MATOMO_SCRIPT_URL=#
      # Debug options
      - XDEBUG_CONFIG=client_port=9003 idekey=${APP_XDEBUG_IDE_KEY}
      - XDEBUG_SESSION=${APP_XDEBUG_IDE_KEY}
      # Debug options for Intellij/PHPStorm
      - PHP_IDE_CONFIG=serverName=debug
      # Wait for it...
      - WAIT_FOR=database:5432

  app_dev_messenger:
    image: ${IMAGE_NAME}-dev
    #container_name: app_dev_messenger
    # Stop messenger after 3 messages or timeout (2 hours)
    command: php bin/console messenger:consume async -vv --limit=3 --memory-limit=128M --time-limit=7200
    restart: unless-stopped
    scale: 2
    depends_on:
      app_dev_symfony:
        condition: service_started
      app_dev_mailer:
        condition: service_started
      app_dev_db:
        condition: service_healthy
      app_dev_rabbitmq:
        condition: service_started
    networks:
      default:
      app_dev_internal_network:
    volumes:
      # For DEV, mount local sources
      - ./app:/var/www/html
      # Mount local PHP conf files
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ./docker/php/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - SF_PROD=false
      - APP_ENV=dev
      - APP_DEBUG=true
      - ENCRYPTOR_KEY=${APP_ENCRYPTOR_KEY}
      # Database configuration
      #- SF_DB_TYPE=postgresql
      #- SF_DB_VERSION=${APP_DB_VERSION}
      #- SF_DB_OPTIONS=&charset=utf8
      #- SF_DB_HOST=database
      #- SF_DB_PORT=5432
      #- SF_DB_NAME=${APP_DB_NAME}
      #- SF_DB_USER=${APP_DB_USER}
      #- SF_DB_PASSWORD=${APP_DB_PASSWD}
      # Normally generated by entrypoint at runtime
      - DATABASE_URL=postgresql://${APP_DB_USER}:${APP_DB_PASSWD}@database:5432/${APP_DB_NAME}?serverVersion=${APP_DB_VERSION}&charset=utf8
      # Mailer configuration
      #- MAILER_TRANSPORT=smtp
      #- MAILER_HOST=mailer
      #- MAILER_PORT=1025
      #- MAILER_USER=
      #- MAILER_PASSWORD=
      # Normally generated by entrypoint at runtime
      - MAILER_DSN=smtp://mailer:1025
      # RabbitMQ configuration
      #- MESSENGER_TRANSPORT=amqp
      #- SF_RABBITMQ_HOST=rabbitmq
      #- SF_RABBITMQ_PORT=5672
      #- SF_RABBITMQ_USER=${APP_RABBIT_USER}
      #- SF_RABBITMQ_PASSWORD=${APP_RABBIT_PASSWD}
      # Normally generated by entrypoint at runtime
      - MESSENGER_TRANSPORT_DSN=amqp://${APP_RABBIT_USER}:${APP_RABBIT_PASSWD}@rabbitmq:5672/%2f/messages
      # JWT passphrase. If not defined, container will generate passphrase and keys on startup
      - JWT_PASSPHRASE=${APP_JWT_PASSPHRASE}
      # LDAP Authentication configuration
      - LDAP_AUTH_ENABLED=${APP_LDAP_AUTH_ENABLED}
      - LDAP_AUTH_HOST=app_dev_ldap
      - LDAP_AUTH_PORT=10389
      - LDAP_AUTH_ENCRYPTION=none
      - LDAP_AUTH_IS_AD=0
      - LDAP_AUTH_AD_DOMAIN=${APP_LDAP_AUTH_AD_DOMAIN}
      - LDAP_AUTH_BASE_DN=${APP_LDAP_AUTH_BASE_DN}
      - LDAP_AUTH_USER_QUERY=(objectClass=inetOrgPerson)
      - LDAP_AUTH_USERNAME_ATTRIBUTE=uid
      - LDAP_AUTH_EMAIL_ATTRIBUTE=mail
      - LDAP_BIND_DN=${APP_LDAP_BIND_DN}
      - LDAP_BIND_SECRET=${APP_LDAP_BIND_SECRET}
      # LDAP Group configuration
      - LDAP_GROUP_BASE_DN=${APP_LDAP_GROUP_BASE_DN}
      - LDAP_GROUP_QUERY=(objectClass=Group)
      - LDAP_GROUP_ATTRIBUTE=member
      # Paypal configuration
      - PAYPAL_CLIENT_ID=${APP_PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${APP_PAYPAL_CLIENT_SECRET}
      # Application Public URLs
      - SF_SERVER_PUBLIC_URL=http://localhost:8000
      - SF_WEBSITE_PUBLIC_URL=http://localhost:8000
      - SF_FACEBOOK_URL=#
      - SF_TWITTER_URL=#
      - SF_LINKEDIN_URL=#
      - SF_YOUTUBE_URL=#
      # Debug options
      - XDEBUG_CONFIG=client_port=9003 idekey=${APP_XDEBUG_IDE_KEY}
      - XDEBUG_SESSION=${APP_XDEBUG_IDE_KEY}
      # Debug options for Intellij/PHPStorm
      - PHP_IDE_CONFIG=serverName=debug
      # Wait for it...
      - WAIT_FILE=app,db-migrations
      - WAIT_FOR=rabbitmq:5672,mailer:1025

  app_dev_encore:
    image: ${IMAGE_NAME}-dev
    command: npm run watch
    container_name: app_dev_encore
    #restart: always
    depends_on:
      app_dev_symfony:
        condition: service_started
    networks:
      - app_dev_internal_network
    volumes:
      # For DEV, mount local sources
      - ./app:/var/www/html
      # Mount local PHP conf files
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - SF_PROD=false
      - APP_ENV=dev
      - APP_DEBUG=true
      # Disable database configuration
      - SF_DB_TYPE=
      # Wait for it...
      - WAIT_FILE=app,db-migrations
      - WAIT_FOR=rabbitmq:5672,mailer:1025

  app_dev_storybook:
    image: ${IMAGE_NAME}-dev
    command: npm run storybook
    container_name: app_dev_storybook
    #restart: always
    ports:
      - "6006:6006"
    depends_on:
      app_dev_encore:
        condition: service_started
    networks:
      - app_dev_external_network
      - app_dev_internal_network
    environment:
      - SF_PROD=false
      - APP_ENV=dev
      - APP_DEBUG=true
      # Disable database configuration
      - SF_DB_TYPE=
      # Wait for it...
      - WAIT_FILE=app,db-migrations
      - WAIT_FOR=rabbitmq:5672,mailer:1025
    volumes:
      # For DEV, mount local sources
      - ./app:/var/www/html
      # Mount local PHP conf files
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  app_dev_db:
    image: postgres:${APP_DB_VERSION}-alpine
    container_name: app_dev_db
    restart: always
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${APP_DB_USER}", "-d", "${APP_DB_NAME}"]
    expose:
      - '5432'
    ports:
      - "55432:5432"
    networks:
      app_dev_internal_network:
        aliases:
          - database
    labels:
      com.symfony.server.service-prefix: "DATABASE"
    environment:
      - POSTGRES_DB=${APP_DB_NAME}
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWD}
    volumes:
      - ${APP_HOME}_dev/db/data/:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  app_dev_pghero:
    image: ankane/pghero:v2.8.1
    container_name: app_dev_pghero
    #restart: always
    healthcheck:
      test: CMD curl -v --fail --silent http://localhost:8080/health 2>&1
      interval: 1m30s
      timeout: 10s
      retries: 3
      #start_period: 40s
    expose:
      - '8080'
    ports:
      - "58080:8080"
    depends_on:
      - app_dev_db
    networks:
      - app_dev_internal_network
      - app_dev_external_network
    environment:
      - DATABASE_URL=postgres://${APP_DB_USER}:${APP_DB_PASSWD}@database:5432/${APP_DB_NAME}
      - PGHERO_USERNAME=${APP_DB_USER}
      - PGHERO_PASSWORD=${APP_DB_PASSWD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  app_dev_rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: app_dev_rabbitmq
    container_name: app_dev_rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      timeout: 5s
      retries: 1
    mem_limit: 768M
    memswap_limit: 1024M
    expose:
      - '5672'
      - '15672'
    ports:
      - "15672:15672"
    labels:
      com.symfony.server.service-prefix: "RABBITMQ"
    networks:
      app_dev_external_network:
      app_dev_internal_network:
        aliases:
          - rabbitmq
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - RABBITMQ_DEFAULT_USER=${APP_RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${APP_RABBIT_PASSWD}

#  # Uncomment ELK stack for searching through logs
#  app_dev_elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
#    container_name: app_dev_elasticsearch
#    expose:
#      - '9200'
#      - '9300'
#    ports:
#      - "9200:9200"
#    networks:
#      app_dev_internal_network:
#      app_dev_elk_network:
#        aliases:
#          - "elasticsearch"
#    volumes:
#      - app_dev_elasticsearch:/usr/share/elasticsearch/data:rw
#    #  - ${APP_HOME}_dev/elasticsearch/:/usr/share/elasticsearch/data:rw
#    environment:
#      - discovery.type=single-node
#      #- ELASTIC_PASSWORD=${APP_ELASTICSEARCH_PASSWORD}
#      #- xpack.security.authc.realms.ldap.ldap1.order=0
#      #- xpack.security.authc.realms.ldap.ldap1.url=ldap://ldap:389
#      #- xpack.security.authc.realms.ldap.ldap1.bind_dn=${APP_LDAP_BIND_DN}
#      #- xpack.security.authc.realms.ldap.ldap1.bind_password=${APP_LDAP_BIND_SECRET}
#      #- xpack.security.authc.realms.ldap.ldap1.user_search.base_dn=${APP_LDAP_AUTH_BASE_DN}
#      #- xpack.security.authc.realms.ldap.ldap1.user_search.filter=(uid={0})
#      #- xpack.security.authc.realms.ldap.ldap1.group_search.base_dn=${APP_LDAP_AUTH_BASE_DN}
#      #- xpack.security.authc.realms.ldap.ldap1.files.role_mapping=ES_PATH_CONF/role_mapping.yml
#      #- xpack.security.authc.realms.ldap.ldap1.unmapped_groups_as_roles=false
#
#  app_dev_logstash:
#    image: docker.elastic.co/logstash/logstash:7.12.1
#    container_name: app_dev_logstash
#    depends_on:
#      app_dev_elasticsearch:
#        condition: service_started
#    expose:
#      - '5044'
#      - '9060'
#      - '9600'
#    ports:
#      - "9600:9600"
#    networks:
#      app_dev_elk_network:
#        aliases:
#          - "logstash"
#    volumes:
#      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:cached
#      - ${APP_HOME}_dev/html/var/log:/var/www/symfony/var/log:cached
#      - ${APP_HOME}_dev/nginx/logs:/var/log/nginx:cached
#      - ${APP_HOME}_dev/cron/:/var/log/cron:cached
#    environment:
#      #- LS_JAVA_OPTS=-Xmx1024m -Xms1024m
#      - MONITORING_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      - XPACK_MONITORING_ENABLED=true
#      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      #- XPACK_MONITORING_ELASTICSEARCH_USERNAME=${APP_ELASTICSEARCH_USERNAME}
#      #- XPACK_MONITORING_ELASTICSEARCH_PASSWORD=${APP_ELASTICSEARCH_PASSWORD}
#      #- OUTPUT_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#
#  app_dev_kibana:
#    image: docker.elastic.co/kibana/kibana:7.12.1
#    container_name: app_dev_kibana
#    depends_on:
#      - app_dev_elasticsearch
#    networks:
#      app_dev_elk_network:
#        aliases:
#          - "kibana"
#    ports:
#        - "5601:5601"
#    environment:
#      - SERVER_NAME=kibana
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      #- ELASTICSEARCH_USERNAME=${APP_ELASTICSEARCH_USERNAME}
#      #- ELASTICSEARCH_PASSWORD=${APP_ELASTICSEARCH_PASSWORD}

#  # Uncomment to monitor services
#  app_dev_grafana:
#    # https://hub.docker.com/r/grafana/grafana/tags
#    image: grafana/grafana:7.5.6
#    container_name: app_dev_grafana
#    #restart: always
#    ports:
#      - "3000:3000"
#    networks:
#      app_dev_external_network:
#      app_dev_internal_network:
#        aliases:
#          - grafana
#    volumes:
#      - app_dev_grafana_data:/var/lib/grafana
#      # Use bind mounts to persist on disk
#      #- ${APP_HOME}_dev/grafana:/var/lib/grafana
#      - ./docker/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/rabbitmq.yaml
#      - ./docker/grafana/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
#      - ./docker/grafana/dashboards:/dashboards
#    environment:
#      # https://grafana.com/plugins/flant-statusmap-panel
#      # https://grafana.com/plugins/grafana-piechart-panel
#      # https://grafana.com/plugins/grafana-polystat-panel
#      # https://grafana.com/plugins/jdbranham-diagram-panel
#      # https://grafana.com/plugins/michaeldmoore-multistat-panel
#      # https://grafana.com/plugins/vonage-status-panel
#      # https://grafana.com/plugins/yesoreyeram-boomtable-panel
#      GF_INSTALL_PLUGINS: "flant-statusmap-panel,grafana-piechart-panel"
#      #GF_SECURITY_ADMIN_PASSWORD: "${APP_GRAFANA_ADMIN_PASSWD}"
#
#  app_dev_prometheus:
#    image: prom/prometheus:main
#    container_name: app_dev_prometheus
#    restart: always
#    ports:
#      - "9090:9090"
#    networks:
#      app_dev_internal_network:
#        aliases:
#          - prometheus
#    volumes:
#      - ./docker/prometheus/dev:/etc/prometheus:ro
#
#  app_dev_node_exporter:
#    # https://hub.docker.com/r/prom/node-exporter/tags
#    image: prom/node-exporter:v1.0.1
#    container_name: app_dev_node_exporter
#    #restart: always
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.rootfs=/rootfs'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
#    expose:
#      - '9100'
#    networks:
#      app_dev_internal_network:
#        aliases:
#          - node-exporter
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#
#  app_dev_cadvisor:
#    # https://hub.docker.com/r/google/cadvisor/tags
#    #image: google/cadvisor:v0.33.0
#    # https://console.cloud.google.com/gcr/images/cadvisor/GLOBAL/cadvisor
#    image: gcr.io/cadvisor/cadvisor:v0.39.0
#    container_name: app_dev_cadvisor
#    #restart: always
#    expose:
#      - '8080'
#    networks:
#      app_dev_internal_network:
#        aliases:
#          - cadvisor
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux

  app_dev_mailer:
    image: sj26/mailcatcher:latest
    hostname: app_dev_mailer
    container_name: app_dev_mailer
    restart: always
    expose:
      - '1025'
    ports:
      - "1080:1080"
    labels:
      com.symfony.server.service-prefix: "MAILER"
    networks:
      app_dev_external_network:
      app_dev_internal_network:
        aliases:
          - mailer
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  app_dev_ldap:
    image: rroemhild/test-openldap:2.1
    container_name: app_dev_ldap
    expose:
      - '10389'
      - '10636'
    #ports:
    #  - "10389:10389"
    #  - "10636:10636"
    networks:
      app_dev_internal_network:
        aliases:
          - ldap
    #volumes:
    #  - ${APP_HOME}_dev/ldap/:/var/lib/ldap/
