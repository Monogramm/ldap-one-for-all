version: "2.3"

networks:
  app_external_network:
  app_internal_network:
    internal: true
  #app_elk_network:

#volumes:
#  app_elasticsearch:
#  app_grafana_data:

services:
  app_backend:
    build:
      context: ./
      dockerfile: ${DOCKERFILE_PATH}
      args:
        - APP_PATH=./app
        - APP_PUBLIC_URL=${APP_PUBLIC_URL}
        - WEBSITE_PUBLIC_URL=${APP_PUBLIC_URL}
        - EXPORT_TESTS_RESULTS=true
      #  - VERSION=${TAG}
      #  - VCS_REF=${VCS_REF}
      #  - BUILD_DATE=${BUILD_DATE}
    image: ${IMAGE_NAME}
    container_name: app_backend
    #restart: always
    healthcheck:
      test: ["CMD", "test", "-f", "/var/www/html/.docker/init-app"]
      interval: 60s
      timeout: 10s
      #start_period: 5s
      retries: 4
    depends_on:
      app_db:
        condition: service_healthy
      app_rabbitmq:
        condition: service_started
      app_mailer:
        condition: service_started
      app_ldap:
        condition: service_started
    expose:
      - '9000'
    networks:
      app_external_network:
        aliases:
          - backend
      app_internal_network:
        aliases:
          - symfony
    volumes:
      # For PROD
      - ${APP_HOME}/html/:/var/www/html
      # If you want, you can sync time & timezone with host
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro
    environment:
      - SF_PROD=true
      - APP_ENV=prod
      - SF_CLEAR_CACHE=true
      - SF_INIT_DB=true
      - SHELL_VERBOSITY=3
      # Admin configuration
      - SF_ADMIN_LOGIN=${APP_ADMIN_LOGIN}
      - SF_ADMIN_EMAIL=${APP_ADMIN_EMAIL}
      - SF_ADMIN_PASSWD=${APP_ADMIN_PASSWD}
      # Database configuration
      - DATABASE_DRIVER=postgresql
      - DATABASE_VERSION=${APP_DB_VERSION}
      - DATABASE_OPTIONS=&charset=utf8
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=${APP_DB_NAME}
      - DATABASE_USERNAME=${APP_DB_USER}
      - DATABASE_PASSWORD=${APP_DB_PASSWD}
      # Normally generated by entrypoint at runtime
      - DATABASE_URL=postgresql://${APP_DB_USER}:${APP_DB_PASSWD}@database:5432/${APP_DB_NAME}?serverVersion=${APP_DB_VERSION}
      # Mailer configuration
      - MAILER_TRANSPORT=smtp
      - MAILER_HOST=mailer
      - MAILER_PORT=1025
      - MAILER_USER=${APP_SMTP_USER}
      - MAILER_PASSWORD=${APP_SMTP_PASSWD}
      - MAILER_FROM=${APP_MAILER_FROM}
      # Normally generated by entrypoint at runtime
      - MAILER_DSN=smtp://mailer:1025
      # RabbitMQ configuration
      - MESSENGER_TRANSPORT=amqp
      - MESSENGER_HOST=rabbitmq
      - MESSENGER_PORT=5672
      - MESSENGER_USERNAME=${APP_RABBITMQ_USERNAME}
      - MESSENGER_PASSWORD=${APP_RABBITMQ_PASSWORD}
      # Normally generated by entrypoint at runtime
      - MESSENGER_TRANSPORT_DSN=amqp://${APP_RABBITMQ_USERNAME}:${APP_RABBITMQ_PASSWORD}@rabbitmq:5672/%2f/messages
      # JWT passphrase. If not defined, container will generate passphrase and keys on startup
      - JWT_PASSPHRASE=${APP_JWT_PASSPHRASE}
      # Custom encryptor configuration
      - ENCRYPTOR_KEY=${APP_ENCRYPTOR_KEY}
      # LDAP Authentication configuration
      - LDAP_AUTH_ENABLED=${APP_LDAP_AUTH_ENABLED}
      - LDAP_AUTH_HOST=ldap
      - LDAP_AUTH_PORT=10389
      - LDAP_AUTH_ENCRYPTION=none
      - LDAP_AUTH_IS_AD=0
      - LDAP_AUTH_AD_DOMAIN=${APP_LDAP_AUTH_AD_DOMAIN}
      - LDAP_AUTH_BASE_DN=${APP_LDAP_AUTH_BASE_DN}
      - LDAP_AUTH_USER_QUERY=(objectClass=inetOrgPerson)
      - LDAP_AUTH_USERNAME_ATTRIBUTE=uid
      - LDAP_AUTH_EMAIL_ATTRIBUTE=mail
      - LDAP_BIND_DN=${APP_LDAP_BIND_DN}
      - LDAP_BIND_SECRET=${APP_LDAP_BIND_SECRET}
      # LDAP Group configuration
      - LDAP_GROUP_BASE_DN=${APP_LDAP_GROUP_BASE_DN}
      - LDAP_GROUP_QUERY=(objectClass=Group)
      - LDAP_GROUP_ATTRIBUTE=member
      # Paypal configuration
      - PAYPAL_CLIENT_ID=${APP_PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${APP_PAYPAL_CLIENT_SECRET}
      - PAYPAL_CLIENT_ENV=${APP_PAYPAL_CLIENT_ENV}
      # Application Public URLs
      - SF_SERVER_PUBLIC_URL=${APP_PUBLIC_URL}
      - SF_WEBSITE_PUBLIC_URL=${APP_PUBLIC_URL}
      - SF_FACEBOOK_URL=#
      - SF_TWITTER_URL=#
      - SF_LINKEDIN_URL=#
      - SF_YOUTUBE_URL=#
      # Google Analytics
      - SF_GOOGLE_ANALYTICS_ID=#
      # Matomo
      - SF_MATOMO_URL=#
      - SF_MATOMO_SITE_ID=0
      - SF_MATOMO_SCRIPT_URL=#
      # PHP configuration
      - PHP_MEMORY_LIMIT=1024M
      - PHP_INI_DATE_TIMEZONE=${APP_TIMEZONE}
      # Wait for it...
      - WAIT_FOR=database:5432

  app_messenger:
    image: ${IMAGE_NAME}
    #container_name: app_messenger
    # Stop messenger after 10 messages or timeout (6 hours)
    command: php bin/console messenger:consume async -vv --limit=10 --memory-limit=128M --time-limit=21600
    restart: unless-stopped
    scale: 4
    depends_on:
      app_backend:
        condition: service_started
      app_mailer:
        condition: service_started
      app_db:
        condition: service_healthy
      app_rabbitmq:
        condition: service_started
    networks:
      - app_external_network
      - app_internal_network
    volumes_from:
      - app_backend
    volumes:
      # For PROD
      - ${APP_HOME}/html/:/var/www/html
      # If you want, you can sync time & timezone with host
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro
    environment:
      - SF_PROD=true
      - APP_ENV=prod
      - SF_CLEAR_CACHE=true
      - SHELL_VERBOSITY=3
      # Admin configuration
      - SF_ADMIN_LOGIN=${APP_ADMIN_LOGIN}
      - SF_ADMIN_EMAIL=${APP_ADMIN_EMAIL}
      - SF_ADMIN_PASSWD=${APP_ADMIN_PASSWD}
      # Database configuration
      - DATABASE_DRIVER=postgresql
      - DATABASE_VERSION=${APP_DB_VERSION}
      - DATABASE_OPTIONS=&charset=utf8
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=${APP_DB_NAME}
      - DATABASE_USERNAME=${APP_DB_USER}
      - DATABASE_PASSWORD=${APP_DB_PASSWD}
      # Normally generated by entrypoint at runtime
      - DATABASE_URL=postgresql://${APP_DB_USER}:${APP_DB_PASSWD}@database:5432/${APP_DB_NAME}?serverVersion=${APP_DB_VERSION}
      # Mailer configuration
      - MAILER_TRANSPORT=smtp
      - MAILER_HOST=mailer
      - MAILER_PORT=1025
      - MAILER_USER=${APP_SMTP_USER}
      - MAILER_PASSWORD=${APP_SMTP_PASSWD}
      - MAILER_FROM=${APP_MAILER_FROM}
      # Normally generated by entrypoint at runtime
      - MAILER_DSN=smtp://mailer:1025
      # RabbitMQ configuration
      - MESSENGER_TRANSPORT=amqp
      - MESSENGER_HOST=rabbitmq
      - MESSENGER_PORT=5672
      - MESSENGER_USERNAME=${APP_RABBITMQ_USERNAME}
      - MESSENGER_PASSWORD=${APP_RABBITMQ_PASSWORD}
      # Normally generated by entrypoint at runtime
      - MESSENGER_TRANSPORT_DSN=amqp://${APP_RABBITMQ_USERNAME}:${APP_RABBITMQ_PASSWORD}@rabbitmq:5672/%2f/messages
      # JWT passphrase. If not defined, container will generate passphrase and keys on startup
      - JWT_PASSPHRASE=${APP_JWT_PASSPHRASE}
      # Custom encryptor configuration
      - ENCRYPTOR_KEY=${APP_ENCRYPTOR_KEY}
      # LDAP Authentication configuration
      - LDAP_AUTH_ENABLED=${APP_LDAP_AUTH_ENABLED}
      - LDAP_AUTH_HOST=ldap
      - LDAP_AUTH_PORT=10389
      - LDAP_AUTH_ENCRYPTION=none
      - LDAP_AUTH_IS_AD=0
      - LDAP_AUTH_AD_DOMAIN=${APP_LDAP_AUTH_AD_DOMAIN}
      - LDAP_AUTH_BASE_DN=${APP_LDAP_AUTH_BASE_DN}
      - LDAP_AUTH_USER_QUERY=(objectClass=inetOrgPerson)
      - LDAP_AUTH_USERNAME_ATTRIBUTE=uid
      - LDAP_AUTH_EMAIL_ATTRIBUTE=mail
      - LDAP_BIND_DN=${APP_LDAP_BIND_DN}
      - LDAP_BIND_SECRET=${APP_LDAP_BIND_SECRET}
      # LDAP Group configuration
      - LDAP_GROUP_BASE_DN=${APP_LDAP_GROUP_BASE_DN}
      - LDAP_GROUP_QUERY=(objectClass=Group)
      - LDAP_GROUP_ATTRIBUTE=member
      # Paypal configuration
      - PAYPAL_CLIENT_ID=${APP_PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${APP_PAYPAL_CLIENT_SECRET}
      - PAYPAL_CLIENT_ENV=${APP_PAYPAL_CLIENT_ENV}
      # Application Public URLs
      - SF_SERVER_PUBLIC_URL=${APP_PUBLIC_URL}
      - SF_WEBSITE_PUBLIC_URL=${APP_PUBLIC_URL}
      - SF_FACEBOOK_URL=#
      - SF_TWITTER_URL=#
      - SF_LINKEDIN_URL=#
      - SF_YOUTUBE_URL=#
      # PHP configuration
      - PHP_MEMORY_LIMIT=256M
      - PHP_INI_DATE_TIMEZONE=${APP_TIMEZONE}
      # Wait for it...
      - WAIT_FILE=app,db-migrations
      - WAIT_FOR=rabbitmq:5672,mailer:1025

  app_cron:
    image: ${IMAGE_NAME}
    container_name: app_cron
    command: crond -f -l 8
    #restart: always
    depends_on:
      app_backend:
        condition: service_started
      app_mailer:
        condition: service_started
      app_db:
        condition: service_healthy
      app_rabbitmq:
        condition: service_started
    networks:
      - app_external_network
      - app_internal_network
    volumes_from:
      - app_backend
    volumes:
      - ${APP_HOME}/cron/:/var/log
      # If you want, you can sync time & timezone with host
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro
    environment:
      - SF_PROD=true
      - APP_ENV=prod
      - SF_CLEAR_CACHE=true
      - SHELL_VERBOSITY=3
      # Admin configuration
      - SF_ADMIN_LOGIN=${APP_ADMIN_LOGIN}
      - SF_ADMIN_EMAIL=${APP_ADMIN_EMAIL}
      - SF_ADMIN_PASSWD=${APP_ADMIN_PASSWD}
      # Database configuration
      - DATABASE_DRIVER=postgresql
      - DATABASE_VERSION=${APP_DB_VERSION}
      - DATABASE_OPTIONS=&charset=utf8
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=${APP_DB_NAME}
      - DATABASE_USERNAME=${APP_DB_USER}
      - DATABASE_PASSWORD=${APP_DB_PASSWD}
      # Normally generated by entrypoint at runtime
      - DATABASE_URL=postgresql://${APP_DB_USER}:${APP_DB_PASSWD}@database:5432/${APP_DB_NAME}?serverVersion=${APP_DB_VERSION}
      # Mailer configuration
      - MAILER_TRANSPORT=smtp
      - MAILER_HOST=mailer
      - MAILER_PORT=1025
      - MAILER_USER=${APP_SMTP_USER}
      - MAILER_PASSWORD=${APP_SMTP_PASSWD}
      - MAILER_FROM=${APP_MAILER_FROM}
      # Normally generated by entrypoint at runtime
      - MAILER_DSN=smtp://mailer:1025
      # RabbitMQ configuration
      - MESSENGER_TRANSPORT=amqp
      - MESSENGER_HOST=rabbitmq
      - MESSENGER_PORT=5672
      - MESSENGER_USERNAME=${APP_RABBITMQ_USERNAME}
      - MESSENGER_PASSWORD=${APP_RABBITMQ_PASSWORD}
      # Normally generated by entrypoint at runtime
      - MESSENGER_TRANSPORT_DSN=amqp://${APP_RABBITMQ_USERNAME}:${APP_RABBITMQ_PASSWORD}@rabbitmq:5672/%2f/messages
      # JWT passphrase. If not defined, container will generate passphrase and keys on startup
      - JWT_PASSPHRASE=${APP_JWT_PASSPHRASE}
      # Custom encryptor configuration
      - ENCRYPTOR_KEY=${APP_ENCRYPTOR_KEY}
      # LDAP Authentication configuration
      - LDAP_AUTH_ENABLED=${APP_LDAP_AUTH_ENABLED}
      - LDAP_AUTH_HOST=ldap
      - LDAP_AUTH_PORT=10389
      - LDAP_AUTH_ENCRYPTION=none
      - LDAP_AUTH_IS_AD=0
      - LDAP_AUTH_AD_DOMAIN=${APP_LDAP_AUTH_AD_DOMAIN}
      - LDAP_AUTH_BASE_DN=${APP_LDAP_AUTH_BASE_DN}
      - LDAP_AUTH_USER_QUERY=(objectClass=inetOrgPerson)
      - LDAP_AUTH_USERNAME_ATTRIBUTE=uid
      - LDAP_AUTH_EMAIL_ATTRIBUTE=mail
      - LDAP_BIND_DN=${APP_LDAP_BIND_DN}
      - LDAP_BIND_SECRET=${APP_LDAP_BIND_SECRET}
      # LDAP Group configuration
      - LDAP_GROUP_BASE_DN=${APP_LDAP_GROUP_BASE_DN}
      - LDAP_GROUP_QUERY=(objectClass=Group)
      - LDAP_GROUP_ATTRIBUTE=member
      # Paypal configuration
      - PAYPAL_CLIENT_ID=${APP_PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${APP_PAYPAL_CLIENT_SECRET}
      - PAYPAL_CLIENT_ENV=${APP_PAYPAL_CLIENT_ENV}
      # Application Public URLs
      - SF_SERVER_PUBLIC_URL=${APP_PUBLIC_URL}
      - SF_WEBSITE_PUBLIC_URL=${APP_PUBLIC_URL}
      - SF_FACEBOOK_URL=#
      - SF_TWITTER_URL=#
      - SF_LINKEDIN_URL=#
      - SF_YOUTUBE_URL=#
      # PHP configuration
      - PHP_MEMORY_LIMIT=256M
      - PHP_INI_DATE_TIMEZONE=${APP_TIMEZONE}
      # Wait for it...
      - WAIT_FILE=app,db-migrations
      - WAIT_FOR=database:5432,mailer:1025

  app_db:
    image: postgres:${APP_DB_VERSION}-alpine
    container_name: app_db
    restart: always
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${APP_DB_USER}", "-d", "${APP_DB_NAME}"]
    expose:
      - '5432'
    ports:
      - "55432:5432"
    networks:
      app_internal_network:
        aliases:
          - database
    volumes:
      - ${APP_HOME}/db/data/:/var/lib/postgresql/data
      # If you want, you can sync time & timezone with host
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro
    environment:
      - POSTGRES_DB=${APP_DB_NAME}
      - POSTGRES_USER=${APP_DB_USER}
      - POSTGRES_PASSWORD=${APP_DB_PASSWD}

  app_rabbitmq:
    image: rabbitmq:3-alpine
    hostname: app_rabbitmq
    container_name: app_rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      timeout: 5s
      retries: 1
    mem_limit: 768M
    memswap_limit: 1024M
    expose:
      - '5672'
    networks:
      app_internal_network:
        aliases:
          - rabbitmq
    volumes:
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      # If you want, you can sync time & timezone with host
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  app_web:
    image: nginx:alpine
    container_name: app_web
    #restart: always
    healthcheck:
      test: curl --fail http://localhost:80/health | grep -q -e 'UP' || exit 1
      interval: 60s
      timeout: 10s
      #start_period: 5s
      retries: 4
    expose:
      - '80'
    ports:
      - "8080:80"
    depends_on:
      app_backend:
        condition: service_started
    links:
      - app_backend:backend
    networks:
      app_external_network:
        aliases:
          - nginx
    volumes_from:
      - app_backend
    volumes:
      - ${APP_HOME}/nginx/logs:/var/logs/nginx
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # For PROD
      - ${APP_HOME}/html/:/var/www/html:ro
      # If you want, you can sync time & timezone with host
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

#  # Uncomment ELK stack for searching through logs
#  app_elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
#    container_name: app_elasticsearch
#    expose:
#      - '9200'
#      - '9300'
#    ports:
#      - "9200:9200"
#    networks:
#      app_internal_network:
#      app_elk_network:
#        aliases:
#          - "elasticsearch"
#    volumes:
#      - app_elasticsearch:/usr/share/elasticsearch/data:rw
#    #  - ${APP_HOME}/elasticsearch/:/usr/share/elasticsearch/data:rw
#    environment:
#      - discovery.type=single-node
#      #- ELASTIC_PASSWORD=${APP_ELASTICSEARCH_PASSWORD}
#      #- xpack.security.authc.realms.ldap.ldap1.order=0
#      #- xpack.security.authc.realms.ldap.ldap1.url=ldap://ldap:389
#      #- xpack.security.authc.realms.ldap.ldap1.bind_dn=${APP_LDAP_BIND_DN}
#      #- xpack.security.authc.realms.ldap.ldap1.bind_password=${APP_LDAP_BIND_SECRET}
#      #- xpack.security.authc.realms.ldap.ldap1.user_search.base_dn=${APP_LDAP_AUTH_BASE_DN}
#      #- xpack.security.authc.realms.ldap.ldap1.user_search.filter=(uid={0})
#      #- xpack.security.authc.realms.ldap.ldap1.group_search.base_dn=${APP_LDAP_AUTH_BASE_DN}
#      #- xpack.security.authc.realms.ldap.ldap1.files.role_mapping=ES_PATH_CONF/role_mapping.yml
#      #- xpack.security.authc.realms.ldap.ldap1.unmapped_groups_as_roles=false
#
#  app_logstash:
#    image: docker.elastic.co/logstash/logstash:7.12.1
#    container_name: app_logstash
#    depends_on:
#      app_elasticsearch:
#        condition: service_started
#    expose:
#      - '5044'
#      - '9060'
#      - '9600'
#    ports:
#      - "9600:9600"
#    networks:
#      app_elk_network:
#        aliases:
#          - "logstash"
#    volumes:
#      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:cached
#      - ${APP_HOME}/html/var/log:/var/www/symfony/var/log:cached
#      - ${APP_HOME}/nginx/logs:/var/log/nginx:cached
#      - ${APP_HOME}/cron/:/var/log/cron:cached
#    environment:
#      #- LS_JAVA_OPTS=-Xmx1024m -Xms1024m
#      - MONITORING_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      - XPACK_MONITORING_ENABLED=true
#      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      #- XPACK_MONITORING_ELASTICSEARCH_USERNAME=${APP_ELASTICSEARCH_USERNAME}
#      #- XPACK_MONITORING_ELASTICSEARCH_PASSWORD=${APP_ELASTICSEARCH_PASSWORD}
#      #- OUTPUT_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#
#  app_kibana:
#    image: docker.elastic.co/kibana/kibana:7.12.1
#    container_name: app_kibana
#    depends_on:
#      - app_elasticsearch
#    networks:
#      app_elk_network:
#        aliases:
#          - "kibana"
#    ports:
#        - "5601:5601"
#    environment:
#      - SERVER_NAME=kibana
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      #- ELASTICSEARCH_USERNAME=${APP_ELASTICSEARCH_USERNAME}
#      #- ELASTICSEARCH_PASSWORD=${APP_ELASTICSEARCH_PASSWORD}

  # Uncomment to monitor services
#  app_grafana:
#    # https://hub.docker.com/r/grafana/grafana/tags
#    image: grafana/grafana:7.5.6
#    container_name: app_grafana
#    #restart: always
#    ports:
#      - "3000:3000"
#    networks:
#      app_external_network:
#      app_internal_network:
#        aliases:
#          - grafana
#    volumes:
#      - app_grafana_data:/var/lib/grafana
#      # Use bind mounts to persist on disk
#      #- ${APP_HOME}/grafana:/var/lib/grafana
#      - ./docker/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/rabbitmq.yaml
#      - ./docker/grafana/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
#      - ./docker/grafana/dashboards:/dashboards
#    environment:
#      # https://grafana.com/plugins/flant-statusmap-panel
#      # https://grafana.com/plugins/grafana-piechart-panel
#      # https://grafana.com/plugins/grafana-polystat-panel
#      # https://grafana.com/plugins/jdbranham-diagram-panel
#      # https://grafana.com/plugins/michaeldmoore-multistat-panel
#      # https://grafana.com/plugins/vonage-status-panel
#      # https://grafana.com/plugins/yesoreyeram-boomtable-panel
#      GF_INSTALL_PLUGINS: "flant-statusmap-panel,grafana-piechart-panel"
#      #GF_SECURITY_ADMIN_PASSWORD: "${APP_GRAFANA_ADMIN_PASSWD}"
#
#  app_prometheus:
#    image: prom/prometheus:main
#    container_name: app_prometheus
#    restart: always
#    ports:
#      - "9090:9090"
#    networks:
#      app_internal_network:
#        aliases:
#          - prometheus
#    volumes:
#      - ./docker/prometheus/prod:/etc/prometheus:ro
#
#  app_redis:
#    image: redis:5.0-alpine
#    container_name: app_redis
#    restart: always
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#    expose:
#      - '6379'
#    networks:
#      app_internal_network:
#        aliases:
#          - redis
#    environment:
#      #- REDIS_PASSWORD=${APP_REDIS_PASSWD}
#      - ALLOW_EMPTY_PASSWORD=yes
#    volumes:
#      - ${APP_HOME}/redis/:/data
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#
#  app_node_exporter:
#    # https://hub.docker.com/r/prom/node-exporter/tags
#    image: prom/node-exporter:v1.0.1
#    container_name: app_node_exporter
#    #restart: always
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.rootfs=/rootfs'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
#    expose:
#      - '9100'
#    networks:
#      app_internal_network:
#        aliases:
#          - node-exporter
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#
#  app_cadvisor:
#    # https://console.cloud.google.com/gcr/images/cadvisor/GLOBAL/cadvisor
#    image: gcr.io/cadvisor/cadvisor:v0.39.0
#    container_name: app_cadvisor
#    #restart: always
#    expose:
#      - '8080'
#    networks:
#      app_internal_network:
#        aliases:
#          - cadvisor
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux

  # Test services (do not use in production)

  # https://docs.docker.com/docker-hub/builds/automated-testing/
  sut:
    build:
      context: ./docker/test
      dockerfile: Dockerfile
    command: sh /docker_test.sh
    networks:
      - app_external_network
      - app_internal_network
    depends_on:
      app_backend:
        condition: service_started
      app_web:
        condition: service_started
    environment:
      - DOCKER_TEST_CONTAINER=app_backend
      - DOCKER_WEB_CONTAINER=app_web
    volumes_from:
      - app_backend
      - app_web
    # If you want, you can sync time & timezone with host
    #volumes:
    #  - /etc/localtime:/etc/localtime:ro
    #  - /etc/timezone:/etc/timezone:ro

  app_mailer:
    image: sj26/mailcatcher:latest
    hostname: app_mailer
    container_name: app_mailer
    restart: always
    expose:
      - '1025'
      - '1080'
    ports:
      - "1025:1025"
      - "1080:1080"
    networks:
      app_external_network:
      app_internal_network:
        aliases:
          - mailer
    # If you want, you can sync time & timezone with host
    #volumes:
    #  - /etc/localtime:/etc/localtime:ro
    #  - /etc/timezone:/etc/timezone:ro

  app_ldap:
    image: rroemhild/test-openldap:2.1
    container_name: app_ldap
    hostname: app_ldap
    expose:
      - '10389'
      - '10636'
    #ports:
    #  - "10389:10389"
    #  - "10636:10636"
    networks:
      app_internal_network:
        aliases:
          - ldap
    #volumes:
    #  - ${APP_HOME}/ldap/:/var/lib/ldap/
    #  # If you want, you can sync time & timezone with host
    #  #- /etc/localtime:/etc/localtime:ro
    #  #- /etc/timezone:/etc/timezone:ro
